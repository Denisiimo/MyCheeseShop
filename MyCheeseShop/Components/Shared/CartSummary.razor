@inject ShoppingCart ShoppingCart
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStorage

<div class="row">
    <div class="col-sm-6 mb-3 mb-sm-0">
        <div class="card">
            <div class="card-body">
                @foreach (var item in ShoppingCart.GetItems())
                {
                    <div class="row g-0">
                        <div class="col-md-4">
                            <img src="/img/@item.Cheese.ImageUrl" class="card-img-top p-1" alt="@item.Cheese.Name" onerror="this.onerror = null; this.src='/img/no_cheese.png'">
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <h5 class="orange">@item.Cheese.Name</h5>
                                <p class="orange card-text">£@item.Cheese.Price</p>
                                @if (IsEditable)
                                {
                                    <div class="d-flex items-baseline grid gap-2">
                                        <button style="--bs-btn-hover-bg: orange;" class="btn btn-outline-dark" @onclick="() => RemoveQuantity(item)">-</button>
                                        <p class="card-text"><small class="text-body-secondary">@(item.Quantity * 100)g</small></p>
                                        <button style="--bs-btn-hover-bg: orange;" class="btn btn-outline-dark" @onclick="() => AddQuantity(item)">+</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    @if (IsEditable)
    {
        <div class="col-sm-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="orange">Total: @(ShoppingCart.Total().ToString("C"))</h2>
                    <h3 class="orange">Total g: @(ShoppingCart.TotalGrams() * 100)g</h3>
                    <a @onclick="GoToCheckout" class="btn btn-outline-danger">Checkout</a>
                </div>
            </div>
        </div>
    }
</div>

@code {
    decimal totalCart = 0;

    [Parameter]
    public bool IsEditable { get; set; } = false;

    protected override void OnInitialized()
    {
        ShoppingCart.OnCartUpdated += async () => await CartUpdated();
    }

    private async Task CartUpdated()
    {
        StateHasChanged();
        await ProtectedSessionStorage.SetAsync("cart", ShoppingCart.GetItems());
    }

    private void GoToStore()
    {
        NavigationManager.NavigateTo("/");
    }

    private void GoToCheckout()
    {
        NavigationManager.NavigateTo("/checkout");
    }

    private void AddQuantity(CartItem item)
    {
        ShoppingCart.AddItem(item.Cheese, 1);
    }

    private void RemoveQuantity(CartItem item)
    {
        ShoppingCart.RemoveItem(item.Cheese, 1);
    }

    private void RemoveItem(CartItem item)
    {
        ShoppingCart.RemoveItem(item.Cheese);
    }
}
