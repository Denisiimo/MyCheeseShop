@page "/checkout"
@using System.ComponentModel.DataAnnotations


@attribute [Authorize]
@inject UserProvider UserProvider
@inject OrderProvider OrderProvider
@inject ShoppingCart ShoppingCart
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore

@* <CartSummary IsEditable="false" /> *@
<a @onclick="GoToStore" class="btn btn-outline-primary">Store</a>

<a @onclick="GoToCart" class="btn btn-outline-primary">Cart</a>
<div class="row">
    <div class="col-sm-6 mb-3 mb-sm-0">
        <div class="card">
            <div class="card-body">
                <div class="col-sm">
                    <div class="d-flex justify-content-between">
                        <h2 class="card-title">Order Summary</h2>
                        <h2>Total: @(ShoppingCart.Total().ToString("C"))</h2>
                    </div>
                    @foreach (var item in ShoppingCart.GetItems())
                    {
                        <div class="row g-0">
                            <div class="col-md-4">
                                <img src="/img/@item.Cheese.ImageUrl" class="card-img-top p-1" alt="@item.Cheese.Name" onerror="this.onerror = null; this.src='/img/no_cheese.png'">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h2 class="card-title">@item.Cheese.Name</h2>
                                    <p class="card-text fs-4">£@(item.Cheese.Price * item.Quantity)</p>
                                    <p class="card-text fs-5"><small class="text-body-secondary">@(item.Quantity * 100)g</small></p>
                                </div>
                            </div>
                        </div>
                    }

                    @* <CartSummary /> *@
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card">
            <div class="card-body">
                <EditForm EditContext="editContext" OnValidSubmit="MakePayment">
                    <DataAnnotationsValidator />
                    <h4 class="card-title">Payment</h4>
                    <div class="form-group mb-1">
                        <label class="form-label">Name on card</label>
                        <InputText class="form-control" placeholder="@GetFormattedName(user)" @bind-Value="paymentDetails.NameOnCard" />
                    </div>
                    <div class="form-group mb-1">
                        <label class="form-label">Card number</label>
                        <InputText class="form-control" placeholder="0000-0000-0000-0000" @bind-Value="paymentDetails.CardNumber" />
                    </div>
                    <div class="form-group mb-1">
                        <label class="form-label">Expiry Date</label>
                        <InputText class="form-control" placeholder="12/23" @bind-Value="paymentDetails.ExpiryDate" />
                    </div>
                    <div class="form-group mb-1">
                        <label class="form-label">Security Code</label>
                        <InputText class="form-control" placeholder="123" @bind-Value="paymentDetails.SecurityCode" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {

    private User user;
    private PaymentDetails paymentDetails;
    private EditContext editContext;
    private bool isPaying;

    protected override async Task OnInitializedAsync()
    {
        paymentDetails = new PaymentDetails();
        editContext = new EditContext(paymentDetails);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        user = UserProvider.GetUserByUsername(username)!;
    }

    protected override void OnInitialized()
    {
        ShoppingCart.OnCartUpdated += StateHasChanged;
    }

    private async Task MakePayment()
    {
        await SimulatePayment();

        await OrderProvider.CreateOrder(user, ShoppingCart.GetItems());
        ShoppingCart.Clear();
        NavigationManager.NavigateTo("/thank-you");
    }

    private async Task SimulatePayment()
    {
        isPaying = true;
        StateHasChanged();

        await Task.Delay(2000);

        isPaying = false;
        StateHasChanged();
    }

    private void GoToStore()
    {
        NavigationManager.NavigateTo("/");
    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }

    private string GetFormattedName(User user)
    {
        return $"{user.FirstName} {user.LastName}";
    }

    private string GetFormattedAddress(User user)
    {
        return $"{user.Address}{Environment.NewLine}{user.City}{Environment.NewLine}{user.PostCode}";
    }

    private sealed class PaymentDetails
    {
        [Required]
        public string NameOnCard { get; set; }

        [Required]
        public string CardNumber { get; set; }

        [Required]
        public string ExpiryDate { get; set; }

        [Required]
        public string SecurityCode { get; set; }
    }
}
